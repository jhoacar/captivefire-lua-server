#!/bin/sh

set -eux

# Check if is in relative path or absolute
if pwd | grep /home/build/openwrt/build_dir/target-*/root-*
then
    # If it is in firmware builder
    PREFIX="$(pwd)/"
else
    # If it is in system
    PREFIX="/"
fi

PATH_APP="$PREFIX""app"
PATH_ROOT="$PREFIX""root"
PATH_ETC="$PREFIX""etc"
PATH_WWW="$PREFIX""www"
PATH_SBIN="$PREFIX""sbin"


PATH_SERVICES="$PATH_APP""/services"
BIN_UCI="$PATH_SBIN""/uci"

set_ssh_access(){    
    if ! $BIN_UCI show dropbear.@dropbear[0]
    then
        exit 0
    fi
    
    $BIN_UCI set dropbear.@dropbear[0].PasswordAuth="0"
    $BIN_UCI set dropbear.@dropbear[0].RootPasswordAuth="0"
    
    RSA_PUB=$( find $PATH_ROOT -iname "*.pub" )
    [ ! -z "$RSA_PUB" ] && tee -a $PATH_ETC/dropbear/authorized_keys < $RSA_PUB
    
    $BIN_UCI commit
    echo "dropbear" >> $PATH_SERVICES
    
    exit 0
}

set_luci_configuration(){
    if [ ! -d "$PATH_APP/public" ] 
    then
        exit 0
    fi

    ln -s $PATH_WWW/cgi-bin $PATH_APP/public/cgi-bin
    ln -s $PATH_WWW/luci-static $PATH_APP/public/luci-static

    exit 0
}

remove_certificates(){
    
    if [ -z "$(find $PATH_ETC -type f -iname "uhttpd.*" )" ]
    then
        exit 0
    fi
    
    rm $PATH_ETC/uhttpd.crt $PATH_ETC/uhttpd.key
    exit 0
}

disable_luci(){
    if ! $BIN_UCI show uhttpd.captivefire
    then
        exit 0
    fi
        
    $BIN_UCI set uhttpd.captivefire.no_symlinks='1'
    $BIN_UCI del uhttpd.captivefire.ubus_prefix
    $BIN_UCI commit
    echo "uhttpd" >> $PATH_SERVICES
    
    exit 0
}

enable_luci(){
    if ! $BIN_UCI show uhttpd.captivefire
    then
        exit 0
    fi

    $BIN_UCI set uhttpd.captivefire.no_symlinks='0'
    $BIN_UCI set uhttpd.captivefire.ubus_prefix='/ubus'
    $BIN_UCI commit
    echo "uhttpd" >> $PATH_SERVICES
    
    exit 0
}

set_system_config(){
    if ! $BIN_UCI show system.@system[0]
    then
        exit 0
    fi
    
    $BIN_UCI set system.@system[0].hostname='Captivefire'
    $BIN_UCI commit
    echo "system" >> $PATH_SERVICES
    
    exit 0
}

set_network_config(){
    
    if ! $BIN_UCI show network.lan
    then
        exit 0
    fi
    
    $BIN_UCI set network.lan.ipaddr='10.0.0.11'
    
    $BIN_UCI set network.lan.netmask='255.255.0.0'
    $BIN_UCI set network.lan.hostname="`$BIN_UCI get system.@system[0].hostname`"
    $BIN_UCI commit
    echo "network" >> $PATH_SERVICES

    exit 0
}

set_dhcp_range(){
    if ! $BIN_UCI show dhcp.lan
    then
        exit 0
    fi
    
    $BIN_UCI del dhcp.lan.ra_slaac
    $BIN_UCI set dhcp.lan.start='12'
    $BIN_UCI set dhcp.lan.limit='1000'
    $BIN_UCI commit
    echo "dhcp" >> $PATH_SERVICES
    
    exit 0
}

set_captive_password(){

    echo -e "Captivefire\nCaptivefire" | bin/passwd  
    exit 0
}

set_captive_wireless(){

    if ! $BIN_UCI show wireless
    then
        exit 0
    fi

    # Delete existing wireless interfaces
    while $BIN_UCI show wireless.@wifi-iface[-1]
    do  
        $BIN_UCI del wireless.@wifi-iface[-1]
    done
    
    if $BIN_UCI show wireless.radio0 
    then
        # Enable radio
        $BIN_UCI set wireless.radio0.disabled='0'
        $BIN_UCI del wireless.radio0.htmode
        $BIN_UCI set wireless.radio0.band='2g'
        $BIN_UCI set wireless.radio0.channel='auto'
        $BIN_UCI set wireless.radio0.cell_density='0'
    fi
    
    FIRE_UNICODE=$'\xF0\x9F\x94\xA5'
    $BIN_UCI set wireless.wifinet0=wifi-iface
    $BIN_UCI set wireless.wifinet0.device='radio0'
    $BIN_UCI set wireless.wifinet0.mode='ap'
    $BIN_UCI set wireless.wifinet0.ssid="$FIRE_UNICODE Captivefire"
    $BIN_UCI set wireless.wifinet0.encryption='none'
    $BIN_UCI set wireless.wifinet0.network='lan'
    $BIN_UCI set wireless.wifinet0.disabled='0'

    $BIN_UCI commit
    echo "wireless" >> $PATH_SERVICES
    
    exit 0
}

set_captive_portal_firewall(){
    
    if ! $BIN_UCI show firewall
    then
        exit 0
    fi

    # Delete existing firewall redirect
    while $BIN_UCI show firewall.@redirect[-1]
    do  
        $BIN_UCI del firewall.@redirect[-1]
    done

    if ! $BIN_UCI get network.lan.ipaddr
    then
        exit 0
    fi
    
    # iptables -t nat -A PREROUTING -i br-lan -p tcp --dport 80 -j DNAT --to-destination $($BIN_UCI get network.lan.ipaddr):80
    # https://forum.archive.openwrt.org/viewtopic.php?id=71812
    $BIN_UCI add firewall redirect;
    $BIN_UCI set firewall.@redirect[-1].name=Capture-HTTP;
    $BIN_UCI set firewall.@redirect[-1].src=lan;
    $BIN_UCI set firewall.@redirect[-1].proto=tcp;
    $BIN_UCI set firewall.@redirect[-1].src_dip=!$($BIN_UCI get network.lan.ipaddr);
    $BIN_UCI set firewall.@redirect[-1].src_dport="80";
    $BIN_UCI set firewall.@redirect[-1].dest_port="80";
    $BIN_UCI set firewall.@redirect[-1].dest_ip=$($BIN_UCI get network.lan.ipaddr);
    $BIN_UCI set firewall.@redirect[-1].target=DNAT;

    $BIN_UCI commit
    echo "firewall" >> $PATH_SERVICES
    exit 0
}

 set_capture_dns(){
    
    if ! $BIN_UCI show firewall || ! $BIN_UCI show dhcp.@dnsmasq[0] || ! $BIN_UCI get network.lan.ipaddr
    then
        exit 0
    fi

    $BIN_UCI del dhcp.@dnsmasq[0].address
    $BIN_UCI add_list dhcp.@dnsmasq[0].address="/${1:-router.local}/$($BIN_UCI get network.lan.ipaddr)";

    $BIN_UCI add firewall redirect;
    $BIN_UCI set firewall.@redirect[-1].name=Capture-DNS;
    $BIN_UCI set firewall.@redirect[-1].src=lan;
    $BIN_UCI set firewall.@redirect[-1].src_dip=!$($BIN_UCI get network.lan.ipaddr);
    $BIN_UCI set firewall.@redirect[-1].src_dport=53;
    $BIN_UCI set firewall.@redirect[-1].dest_port=53;
    $BIN_UCI set firewall.@redirect[-1].dest_ip=$($BIN_UCI get network.lan.ipaddr);
    $BIN_UCI set firewall.@redirect[-1].target=DNAT;
    exit 0
}

show_usage(){
    echo "\n\t[+] Must invoke this binary with the function to call and his parameters"
    exit 0
}

[ -z "$@" ] && show_usage

if eval $@
then
    exit 0
fi

echo "\n\t[-] An error has ocurred calling '$@'"
exit 1